@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Services;
@using Vidya;
@inherits PanelComponent


<root>

	@if (!GameSystem.Instance.IsValid())
	{
		return;
	}


	@if (GameSystem.Instance.GameOver && Networking.IsHost)
	{
		<div class="game-over">

			<p class="big-text"> GAME OVER </p>
			<p class="you-reached"> You reached level @GameSystem.Instance.Level. </p>
			<p class="press-restart"> Press @(Input.GetButtonOrigin("Restart")?.ToUpper() ?? "???") to Restart. </p>

		</div>
	}
	else if (GameSystem.Instance.GameOver && !Networking.IsHost)
	{
		<div class="game-over">

			<p class="big-text"> GAME OVER </p>
			<p class="you-reached"> You reached level @GameSystem.Instance.Level. </p>
			<p class="press-restart"> Waiting for host. </p>

		</div>
	}
	else
	{
		<div class="status">

			<div class="level-counter"> üèÅ @GameSystem.Instance.Level </div>

			@if (PlayerController.Local.IsValid())
			{
				<div class="health-points"> ‚ô• @PlayerController.Local.Health </div>
			}

		</div>
	}

	@if (GameSystem.ShowLeaderboard && GameSystem.Scores.Any() && GameSystem.Instance.IsValid() &&
			!GameSystem.Instance.StartServer)
	{
		<div class="scoreboard">

			<p class="sb-title"> Leaderboard </p>

			@foreach (var score in GameSystem.Scores)
			{
				<div class="sb-line">
					<p class="sb-rank"> @score.Rank. </p>
					<p class="sb-name"> @score.Name </p>
					<p class="sb-level"> @score.Level </p>
				</div>
			}

		</div>
	}

	@{
		var local = PlayerController.Local;
		var gs = GameSystem.Instance;
	}
	@if ( local.IsValid() && local.CameraController.IsValid() && local.CameraController.SpectateTarget.IsValid() &&
			local.CameraController.Spectating && gs.IsValid() && !gs.GameOver )
	{
		<div class="spectating">
			<div class="spectating-text"> Spectating </div>
			<div class="spectating-name">
				<p>@local.CameraController.SpectateTarget.Network.OwnerConnection.DisplayName</p>
				<img src="@GetAvatarTexture( local.CameraController.SpectateTarget.Network.OwnerConnection )"
					class="avatar" />
			</div>
		</div>
	}

</root>

@code
{
	public string GetAvatarTexture(Connection connection)
	{
		return $"avatar:{connection.SteamId}";
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash()
	{
		int hash = 0;

		hash += System.HashCode.Combine(
			GameSystem.ShowLeaderboard,
		GameSystem.Instance?.Level ?? 0,
		GameSystem.Instance?.GameOver ?? false,
		PlayerController.Local.IsValid(),
		PlayerController.Local?.Health ?? 0,
		Input.UsingController,
		PlayerController.Local?.CameraController?.SpectateTarget,
		GameSystem.Instance?.GameOver ?? false
		);

		hash += System.HashCode.Combine(PlayerController.Local?.CameraController?.Spectating ?? false);

		return hash;
	}
}
