@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@using System.Threading;
@using Sandbox.Network;
@using Vidya;
@using System;
@inherits PanelComponent

<root>
    @{
        if ( GameSystem.GameModes is null )
            return;
    }

	<div class="title"> Brick Runner </div>

	<div class="buttons">
		<div class="button" onclick=@( () => Game.ActiveScene.LoadFromFile( "scenes/minimal.scene" ))> Singleplayer </div>
		<div class="button" onclick=@( () => ChangeState( MenuState.Servers ) )> Multiplayer </div>
        <div class="button" onclick=@( () => ChangeState( MenuState.Leaderboards ) )> Leaderboards </div>
		<div class="button" onclick=@( () => Game.Overlay.ShowSettingsModal )> Settings </div>
		<div class="button" onclick=@Game.Close> Exit </div>
	</div>

	@switch (State)
	{
		case MenuState.Servers:
			<div class="servers">

				<div class="server-list">
					@if (Fetching)
					{
						<div class="server"> Fetching servers... </div>
					}
					else if (Lobbies.Count == 0)
					{
						<div class="server"> No servers found. </div>
					}
					else
					{
						@foreach ( var lobby in Lobbies )
						{
							<div class="server" onclick=@( () => JoinLobby( lobby ) )>
								<div class="server-name"> @lobby.Name </div>
								<div class="server-players"> @lobby.Members / @lobby.MaxMembers </div>
							</div>
						}
					}

				</div>

				<div class="server-options">
					<div class="server" onclick=@( () => Game.ActiveScene.LoadFromFile( "scenes/networking_lobby.scene" ) )> Create Lobby </div>
					<div class="server" onclick=@( () => ChangeState( MenuState.None ) )> Exit </div>
				</div>
			</div>

			break;

        case MenuState.Leaderboards:

        <div class="leaderboard">

            <div class="header">Levels Completed</div>

            <div class="leaderboard-holder">

            @if ( RefreshingLeaderboards )
            {
                <div class="entry"> Refreshing... </div>
            }
            else
            {
                @foreach ( var mode in GameSystem.GameModes.Values.Where( x => !x.Hidden ) )
                {
                    var board = Multiplayer ? Leaderboards?[mode.LeaderboardStat + "_coop"] : Leaderboards?[mode.LeaderboardStat];

                    if ( board is null )
                        continue;

                    @foreach ( var entry in board.Entries )
                    {
                        <div class="entry @( entry.SteamId == (long)Sandbox.Utility.Steam.SteamId ? "me" : "")">
                            <div class="name">@entry.Rank: @entry.DisplayName </div>
                            <div class="value"> @entry.Value </div>
                        </div>
                    }
                }
            }
            

            </div>

            <div class="sort">
                <div class="button" onclick=@( () => Multiplayer = !Multiplayer )>@( Multiplayer ? "Multiplayer" : "Singleplayer" )</div>
                <div class="button" onclick=@ChangeSortBy>@GetSortText()</div>
            </div>
        </div>
        break;
	}

@code
{
	public enum MenuState
	{
		None,
		Servers,
        Leaderboards
	}

    public enum LeaderboardSort
    {
        Day,
        Week,
        Month,
        Year,
        AllTime
    }

	public MenuState State { get; set; } = MenuState.None;
    [Property, Change( nameof( RefreshLeaderboards ) )] public LeaderboardSort SortBy { get; set; } = LeaderboardSort.AllTime;
    [Property] public bool Multiplayer { get; set; }
	
	public List<LobbyInformation> Lobbies { get; set; } = new();

	public bool Fetching { get; set; }

    public bool RefreshingLeaderboards { get; set; }
    
    public CancellationToken RefreshLeaderboardsToken { get; set; } = new();

    [Property] public Dictionary<string, Sandbox.Services.Leaderboards.Board2> Leaderboards { get; set; } = new();

	protected override void OnStart()
	{
		Scene.TimeScale = 1.0f;
		FetchLobbies();
        FetchLeaderboards();
	}



    private async Task SetupLeaderboard( Sandbox.Services.Leaderboards.Board2 board, int maxEntries = 50 )
    {
        board.SetSortDescending();
        board.SetAggregationMax();
        board.CenterOnMe();
        board.MaxEntries = maxEntries;

        await board.Refresh( RefreshLeaderboardsToken );
    }

    public async void FetchLeaderboards()
    {
        if ( GameSystem.GameModes is null )
            return;

        RefreshingLeaderboards = true;

        foreach ( var mode in GameSystem.GameModes.Values )
        {
            if ( mode.Hidden )
                continue;

            var singlePlayer = Sandbox.Services.Leaderboards.GetFromStat( mode.LeaderboardStat );
            var coop = Sandbox.Services.Leaderboards.GetFromStat( mode.LeaderboardStat + "_coop" );

            await SetupLeaderboard( singlePlayer );
            await SetupLeaderboard( coop );

            Leaderboards[mode.LeaderboardStat] = singlePlayer;
            Leaderboards[mode.LeaderboardStat + "_coop"] = coop;
        }

        RefreshingLeaderboards = false;
    }

    //Need to have the arguments match the Change attribute
    public async void RefreshLeaderboards( LeaderboardSort oldValue = LeaderboardSort.AllTime, LeaderboardSort newValue = LeaderboardSort.AllTime )
    {
        RefreshingLeaderboards = true;

        foreach ( var board in Leaderboards.Values )
        {
            switch ( SortBy )
            {
                case LeaderboardSort.Day:
                    board.FilterByDay();
                    break;
                case LeaderboardSort.Week:
                    board.FilterByWeek();
                    break;
                case LeaderboardSort.Month:
                    board.FilterByMonth();
                    break;
                case LeaderboardSort.Year:
                    board.FilterByYear();
                    break;
                case LeaderboardSort.AllTime:
                    break;
            }

            await board.Refresh( RefreshLeaderboardsToken );
        }

        RefreshingLeaderboards = false;
    }

    public string GetSortText()
    {
        switch ( SortBy )
        {
            case LeaderboardSort.Day:
                return "Day";
            case LeaderboardSort.Week:
                return "Week";
            case LeaderboardSort.Month:
                return "Month";
            case LeaderboardSort.Year:
                return "Year";
            case LeaderboardSort.AllTime:
                return "All Time";
        }

        return "All Time";
    }

	public async void FetchLobbies()
	{
		while ( true )
		{
			Fetching = true;

			Lobbies = await Networking.QueryLobbies();

			Fetching = false;
			await Task.Delay( 1000 );
		}
	}

    public void ChangeSortBy()
	{
        RefreshLeaderboardsToken.ThrowIfCancellationRequested();

    	var sortByValues = Enum.GetValues( typeof( LeaderboardSort ) ).Cast<LeaderboardSort>().ToList();
    	var currentIndex = sortByValues.IndexOf( SortBy );
    	var nextIndex = ( currentIndex + 1 ) % sortByValues.Count;
    	SortBy = sortByValues[nextIndex];
	}

	public void JoinLobby( LobbyInformation lobby )
	{
		GameNetworkSystem.Connect( lobby.LobbyId );
	}

	public void ChangeState( MenuState state )
	{
		if ( state == State )
		{
			State = MenuState.None;
			return;
		}
		
		State = state;
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( State, Lobbies?.Count(), Fetching, Leaderboards?.Count(), RefreshingLeaderboards, Multiplayer );
	}
}
